" vim: set foldmarker={,} foldlevel=0 foldmethod=marker :
set encoding=utf-8      " show buffer as utf-8 https://github.com/square/maximum-awesome (**MUST BE EARLY IN FILE**)
scriptencoding utf-8
" Note:
" online help file: https://vimhelp.appspot.com/

" To insert list of keymaps into buffer
" :redir @a
" :map, imap, nmap, vmap, lmap
" "ap
" :help map to see more info

" To see list of scripts loaded in the order in which they were loaded
" :scriptnames
" To see settings which are not the default values
" :set

"Enable syntax highlighting and don't overwrite colorscheme
" on by default in neovim
syntax enable
" Enable file type detection.  Use the default filetype settings
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" from defaults.vim {
" (full line comments are related additional settings)
" compatible' 'cp'	boolean	(default on, off when a |vimrc| file is found
" set nocompatible                " nvim default, must be set for vim
set backspace=indent,eol,start  " fix backspace
set showcmd                     " display incomplete commands
" disable all mouse usage, use keyboard only!!
" set mouse=a                     " Automatically enable mouse usage
" if !has('nvim')
"     set ttymouse=xterm2
" endif

set incsearch                   " search as you type

" Ctrl-A increments character under cursor
" Ctrl-X decrements

set wildmenu                    " Show list instead of just completing
" Command <Tab> completion, list matches, then longest common part, then all.
set wildmode=list:longest,full
" https://bitbucket.org/sjl/dotfiles/src/cbbbc897e9b3/vim/vimrc
set wildignore+=netrw_gitignore#Hide()
" set wildignore+=.hg,.git,.svn                    " Version control
" set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
" set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
" set wildignore+=*.spl                            " compiled spelling word lists
" set wildignore+=*.sw?                            " Vim swap files
" set wildignore+=*.DS_Store                       " OSX bullshit
" set wildignore+=*.luac                           " Lua byte code
" set wildignore+=*.pyc                            " Python byte code
" set wildignore+=*.class                          " Java byte code
" set display+=lastline                          "tpope sensible ?? handled
"}

" no_plugins.vim settings to maximize Vim's built in functionality {
" from https://github.com/mcantor/no_plugins/blob/master/no_plugins.vim
"
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**
" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" TAG JUMPING:
" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .

" help ft-c-omni
" ctags -R -f ~/.vim/systags /usr/include /usr/local/include
set tags+=~/.vim/systags

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" FILE BROWSING:

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in vertical split (4 = prior window)
let g:netrw_liststyle=3     " tree view

"let g:netrw_list_hide=',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_winsize=-200

if trim(system('uname')) ==# 'Linux'
  let g:netrw_browsex_viewer= 'xdg-open'
else
  " Mac OSX
  let g:netrw_browsex_viewer= 'open'
endif

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

"}

" General Settings {
set exrc                " Allow local vimrc files inside projects (for c/cpp)
set secure              " do not allow autocmds in project specific vimrc
set hidden              " Allow buffer switching without saving
set mousehide           " Hide the mouse cursor while typing
set autowriteall        " Write files when many actions, including switching buffers see :help awa

set virtualedit=onemore " Allow for cursor beyond last character
" reccommended to be turned off for no_plugins.vim default file browsing
" set autochdir           " Always change to current file directory
"}

" Setup clipboard to work with desktop copy / paste {
" default registers: * is primary + is clipboard
" if system('uname -s') == 'Linux\n' " && !has('nvim')       has ('x') && has ('gui')  On Linux use + register for copy-paste
" unamed = * (primary X11) unnamedplus = + (clipboard X11)
" Why would I want these to be different? separate yank from delete, change
" help clipboard-unnamed clipboard-unnamedplus clipboard x11-selection
set clipboard=unnamed
set clipboard+=unnamedplus
" if system('uname -s') == 'Darwin\n'  "has ('gui') On Mac & Win use * register for copy-paste
"   set clipboard+=unnamed
" endif
" }

" Vim UI {
set cursorline                  " Highlight current line
set number                      " show line numbers
set showmatch                   " jump cursor to matching brace when entered
set ignorecase                  " case-insensitive search
set smartcase                   " use case sensitive search if any caps present

set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set foldenable                  " Auto fold code
"  To insert special character - in insert mode CTRL-K two character code from :digraphs command
set listchars=tab:›\ ,trail:∙,nbsp:†,extends:»,precedes:« "nvim defaults to tab:> ,trail:-,nbsp:+
set list
set colorcolumn=80              " highlight 80 character width for code files

" status bar
set noshowmode
set laststatus=2
set ruler
" default:internal,filler,closeoff
set diffopt+=vertical,iwhite
"} end Vim UI

" Formatting {
set nowrap              " do not wrap long lines, show indicator instead
set expandtab           " expands tabs to spaces
set shiftwidth=2        " number of spaces to use for autoindent
set tabstop=2           " actual tabs occupy # spaces
set softtabstop=2       " insert mode tab and backspace
set splitright          " puts new vsplit windows to the right
set splitbelow          " puts new hsplit windows below current
set pastetoggle=<F12>   " sane indentation on pastes
" breaks nvim 0.10-dev
" set printoptions=formfeed:y  "insert Ctrl-V Ctrl-L (^L) to create print pagebreak

" }

" GUI Settings (here instead of .gvimrc) {
if has('gui_running')
  " Set my preferred font with comma separated list(spaces must be escaped)
  if trim(system('uname')) ==# 'Linux'
    " linux
    set guifont=Ubuntu\ Mono\ Regular\ 14
    set printfont=Ubuntu\ Mono\ Regular\ 14
  else
    " mac osx guifont
    set guifont=UbuntuMonoDerivativePowerline-Regular:h18
  endif

  set guioptions-=T               "Remove tool bar
  set guioptions+=c               "Use console dialogs
  set lines=48                    "Larger window than 24 row terminal
  set columns=85                  "Wider to accomodate gutter plugins
  "http://stackoverflow.com/questions/18752175/gvim-makes-altletter-key-produce-an-accented-character-instead-of-exiting-ins
  "set guioptions -=m
  "inoremap <M-l> <Esc>l
  "inoremap <M-j> <Esc>j
  "inoremap <M-k> <Esc>k
  "inoremap <M-h> <Esc>h
endif
"} end GUI settings

" Backup and undo settings {
" - 'backupdir' defaults to .,~/.local/share/nvim/backup (|xdg|)
" - 'directory' defaults to ~/.local/share/nvim/swap// (|xdg|), auto-created
" - 'undodir' defaults to ~/.local/share/nvim/undo (|xdg|), auto-created
" - 'viminfo' includes "!"
if !has('nvim')
  if has('persistent_undo')
    " undodir set from spf13
    set undofile
    set undolevels=1000
    " no undo files left in CWD
    if !isdirectory(expand('/tmp/vim/undo/'))
      " help mkdir for more information on use
      call mkdir(expand('/tmp/vim/undo/'), 'p')
    endif
    set undodir=/tmp/vim/undo//
  endif

  set backup                  "See :help backup
  " no backup files left in CWD
  if !isdirectory(expand('/tmp/vim/backup/'))
    call mkdir(expand('/tmp/vim/backup/'), 'p')
  endif
  set backupdir=/tmp/vim/backup//
  " no swap files left in CWD
  if !isdirectory(expand('/tmp/vim/swap/'))
    call mkdir(expand('/tmp/vim/swap/'), 'p')
  endif
  set directory=/tmp/vim/swap//

  " https://vimhelp.appspot.com/usr_21.txt.html#21.3
  " move viminfo file to .vim directory, other settings default and required
  " this conflicts with nvim, disable in neovim
  set viminfo='1000,f1,<500,n/tmp/vim/viminfo
endif

"}

"Keyboard Shortcuts {
" help abbreviate
" Abbreviations:
iabbrev <expr> dts strftime('%F %T')

" Mappings:
" When you have a problem about vim mappings.
" Check :verbose inoremap at the first.
" If you know the keys which have problem,
" then do it with specified key, for example :verbose inoremap <esc>.

" http://vim.wikia.com/wiki/Avoid_the_escape_key
" ** alt + any key will exit insert mode and execute key action hl jk etc
" <C-c> is an alternative to Esc but does not run autocmd by default
" this mapping makes <C-c> execute Esc so autocmd runs
imap <C-c> <Esc>
" shift enter works in gvim, not in gnome-terminal
" enter ^M, s-enter ^M, c-enter <NL>
" https://stackoverflow.com/questions/598113/can-terminals-detect-shift-enter-or-control-enter
" imap <S-Enter> <Esc>
" CTRL_J will replace <CR> in insert mode
" imap <CR> <Esc><CR>

" leave insert mode when moving between lines
imap <Up> <Esc><Up>
imap <Down> <Esc><Down>

"http://www.bestofvim.com/tip/leave-ex-mode-good/
" <Nop> is no operation
map Q q

"force myself to use hjkl instead of arrow keys <nop> only normal mode
" jk <down><up> hl<left><right>
" with moonlander using arrows might be better than keys
" map <up> <nop>
" map <down> <nop>
" map <left> <nop>
" map <right> <nop>

" Easy window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-left> <C-w>h
nnoremap <C-down> <C-w>j
nnoremap <C-up> <C-w>k
nnoremap <C-right> <C-w>l
" for Neovim terminal windows
" if has('nvim')
"   tnoremap <Esc> <C-\><C-n>
"   tnoremap <C-h> <C-\><C-n><C-w>h
"   tnoremap <C-j> <C-\><C-n><C-w>j
"   tnoremap <C-k> <C-\><C-n><C-w>k
"   tnoremap <C-l> <C-\><C-n><C-w>l
"
"   "   function! ClipboardYank()
"   "     call system('xclip -i -selection clipboard', @@)
"   "   endfunction
"   "   function! ClipboardPaste()
"   "     let @@ = system('xclip -o -selection clipboard')
"   "   endfunction
"   "
"   "   vnoremap <silent> y y:call ClipboardYank()<cr>
"   "   vnoremap <silent> d d:call ClipboardYank()<cr>
"   "   nnoremap <silent> p :call ClipboardPaste()<cr>p
" endif
" http://vimcasts.org/episodes/how-to-fold/
" use space bar in normal mode to toggle folds
" TODO: is there a better use for space bar?
nnoremap <Space> za
"
" This unsets the 'last search pattern' register by hitting return
" http://stackoverflow.com/a/662914/2472798
nnoremap <silent> <CR> :noh<CR>

" http://www.jovicailic.org/2015/05/saving-read-only-files-in-vim-sudo-trick/
" http://www.geekyboy.com/archives/629
" http://vim.wikia.com/wiki/Multiple_commands_at_once
cmap w!! w !sudo tee %
" vertical terminal
" cmap vt vert terminal
" terminal in new tab
" issues when using search replace
" cmap tt tab terminal

" compile and run java code for algs4
" https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html
" -ea = enableassertions
" -cp = classpath
map <F7> :!clear; javac -cp ../algs4.jar:. %<CR>
map <F8> :!clear; java -ea -cp ../algs4.jar:. %:r<CR>

"from defaults.vim
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" workaround for netrw bug  :help netrw-debug
" https://github.com/vim/vim/issues/4738#issuecomment-521506447
" https://github.com/vim/vim/issues/4738#issuecomment-565330300
let g:netrw_nogx=1
" TODO: this only works on linux!!
nmap gx yiW:!xdg-open <cWORD><CR> <C-r>" & <CR><CR>
" nnoremap <Leader>g :YcmCompleter GoTo<CR>
"
nmap <Leader>e :ALENextWrap<CR>
"} end keyboard shortcuts

" Auto Commands: {
if !exists('g:autocommands_loaded')
  let g:autocommands_loaded = 1

  augroup VIM
    au!
    " Close preview window when complete {
    " http://stackoverflow.com/a/26022965/2472798
    autocmd CompleteDone * pclose
    " }
    " write file when leaving insert mode if changes have been made {
    " http://www.reddit.com/r/vim/comments/232j45/save_file_on_insert_mode_exit/
    " autocmd InsertLeave * :silent! update
    "}
    " save on FocusLost {
    " http://vim.wikia.com/wiki/Auto_save_files_when_focus_is_lost
    " no longer working on ubuntu 18.04
    autocmd FocusLost * :wa
    " autocmd FocusLost * silent! wa
    " }

    " automatically resize windows on vim resize {
    autocmd VimResized * :wincmd =
    "}
    "
    " jump to last known cursor position {
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
          \ if line("'\"") >= 1 && line("'\"") <= line("$") |
          \   exe "normal! g`\"" |
          \ endif
    "}

    " set title bar to file location {
    autocmd BufEnter * let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
    " }

    " ALEDisable for openapi.json {
    " TODO: not working
    " autocmd BufRead openapi.json :ALEDisable
    "}

  augroup END
  " Git autocmd {
  " Instead of reverting the cursor to the last position in the buffer, we
  " set it to the first line when editing a git commit message
  augroup GIT
    au!
    autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
    " https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message
    autocmd Filetype gitcommit setlocal spell textwidth=72
  augroup END
  "}

  " http://vim.wikia.com/wiki/Shebang_line_automatically_generated {
  augroup Shebang
    au!
    autocmd BufNewFile *.sh 0put =\"#!/usr/bin/env bash\<nl># -*- coding: utf-8 -*-\<nl>\"|$
    "autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python3\<nl># -*- coding: utf-8 -*-\<nl>\"|$
    "autocmd BufNewFile *.c 0put =\"#include <stdio.h>\<nl>\<nl>int main()\<nl>{\<nl>}\<nl>\"|$
  augroup END
  " }

  " set foldmethod to syntax for javascript files {
  augroup JS
    au!
    autocmd  BufRead,BufNewFile *.js set foldmethod=syntax foldlevel=99
    autocmd  BufRead,BufNewFile *.json set foldmethod=syntax foldlevel=99
  augroup END
  "}

  " md is markdown > use pandoc filetype {
  augroup PANDOC
    au!
    autocmd BufRead,BufNewFile *.md set filetype=pandoc
    autocmd BufRead,BufNewFile *.mkd set filetype=pandoc
    autocmd BufRead,BufNewFile *.markdown set filetype=pandoc
    autocmd BufRead,BufNewFile *.rst set filetype=pandoc
    " Enable spellchecking for Markdown
    autocmd FileType pandoc setlocal spell spelllang=en_us wrap linebreak
    autocmd FileType pandoc setlocal tabstop=4
    autocmd FileType pandoc setlocal shiftwidth=4
    autocmd FileType pandoc setlocal softtabstop=4
    autocmd FileType pandoc let b:ale_fix_on_save = 0
    " call local function to update line begining with last modified
    " autocmd BufWritePre *.md,*.markdown,*.mkd :call LastModified()
  augroup END
  " }

  " Octave filetype {
  " http://www.vim.org/scripts/script.php?script_id=3600
  augroup OCTAVE
    au!
    autocmd BufRead,BufNewFile *.m,*.oct set filetype=octave
    autocmd Filetype octave
          \ if &omnifunc == "" |
          \ setlocal omnifunc=syntaxcomplete#Complete |
          \ endif
  augroup END
  " }

  "http://ku1ik.com/2011/09/08/formatting-xml-in-vim-with-indent-command.html {
  augroup XML
    autocmd FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -
  augroup END
  "}


  " python configuration {
  augroup PYTHON
    au!
    autocmd FileType python set foldlevel=99
  augroup END

  nnoremap <buffer> H :<C-u>execute "!pydoc3 " . expand("<cword>")<CR>
  " ]] and [[ will stop at sections markers
  set sections="def class"
  " }

  " Java Configuration {
  let java_highlight_java_lang_ids=1
  let java_highlight_functions='style'
  " }

  "}


  " html template to start with {
  augroup HTML
    au!
    au BufNewFile *.html 0r ~/.vim/template/bootstrap.html
  augroup END
  " }
endif

" end Auto Commands: }

" Custom commands & functions : {
" Update Last Modified line when editing pandoc {
" If buffer modified, update any 'modified: ' in the first 20 lines
" 'modified: ' can have up to 10 characters before (they are retained).
" Restores cursor and window position using save_cursor variable.
" vim magic on by default - all lower case matches any case
" . concatenates without a space between
" getftime returns modified time of file name
" @% returns active buffer file name
function! LastModified()
  " comment out &modified if using getftime()
  "  if &modified
  let save_cursor = getpos('.')
  " minimum of 20 lines or file length
  let n = min([20, line('$')])
  " requires space after modified:
  keepjump execute '1,' . n . 's#^\(.\{,10}modified: \).*#\1' .
        \ strftime('%c') . '#e'
  call histdel('search', -1)
  call setpos('.', save_cursor)
  echom 'updated last modified date'
  "  endif
endfunction
"}
" Searching with RipGrep {
" https://robots.thoughtbot.com/faster-grepping-in-vim#override-to-use-the-silver-searcher
" https://github.com/ggreer/the_silver_searcher
if executable('rg')
  " use rg instead of silver searcher
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat="%f:%l:%c:%m"
endif
"}
" Start/Stop nginx webserver in current pwd {
" https://hub.docker.com/_/nginx/
command! StartWebServer !docker run -d --name $(basename $(pwd)) -v $(pwd):/usr/share/nginx/html:ro -p 8080:80 nginx
function WebServerStop()
  let id = system('docker ps --filter ancestor=nginx -q')
  let cmd = system('docker stop ' . id)
endfunction
command! StopWebServer call WebServerStop()
"}

" https://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file
" https://bitbucket.org/Carpetsmoker/sanitize_files/src
" function TrimWhiteSpace()
"     let l:save_cursor = getpos('.')
"     %s/\s\+$//e
"     call setpos('.', l:save_cursor)
" endfunction
" command! WhiteSpaceRemove :call TrimWhiteSpace()
" 2020-06-17 15:44:16 replaced with ale '*': ['remove_trailing_lines', 'trim_whitespace']

" http://dustinmartin.net/format-json-in-vim/
command! FormatJSON %!python3 -m json.tool

" }

" Neovim settings to make latest vim work like Neovim {
if !has('nvim')
  " nvim defaults {
  set autoindent          " always autoindent
  set autoread            " auto re-load files when changed on disk https://github.com/square/maximum-awesome
  set complete-=i         " doesn't include 'i'
  " - 'display' defaults to 'lastline'
  set history=10000       " command history length extra long
  set hlsearch            " highlight search terms :noh to clear
  set ttyfast             " nvim default
  " defaults.vim suggests removing octal nvim default is bin,hex
  " https://neovim.io/doc/user/options.html#'nrformats'
  set nrformats-=octal    " remove octal as a number format
  " }

  if &ttimeoutlen == -1
    set ttimeout
    set ttimeoutlen=100
  endif

  " https://neovim.io/doc/user/options.html
  if v:version >= 704
    set formatoptions+=tcqj     " https://neovim.io/doc/user/options.html#'formatoptions'
    set laststatus=2            " https://neovim.io/doc/user/options.html#'laststatus'
    " https://neovim.io/doc/user/options.html#'sessionoptions'
    set sessionoptions+=blank,buffers,curdir,folds,help,tabpages,winsize
    set smarttab                " https://neovim.io/doc/user/options.html#'smarttab'
    " 50 vs 10 for https://neovim.io/doc/user/options.html#'tabpagemax'
    set tags+=./tags;,tags      " https://neovim.io/doc/user/options.html#'tags'
  else
    echom 'Not running with Neovim compatibility settings'
  endif
endif
"}

" Plugins {
" must run this command when new plugins installed or no help available
helptags ALL
" git@github.com:w0rp/ale.git {
" Enable completion where available. TODO: Can this replace deoplete?
" This setting must be set before ALE is loaded.
" let g:ale_completion_enabled = 1 " interferes with jedi
" Use ALE's function for omnicompletion.
" set omnifunc=ale#completion#OmniFunc
" See :help ale-completion for more information.
" let g:jedi#completions_enabled = 0

" https://github.com/w0rp/ale#2ii-fixing
" check help ale-options for defaut settings and options available

" turn ale off for specific file
" let g:ale_pattern_options = {'.*openapi\.json$': {'ale_enabled': 0}}
" let g:ale_enabled = 0

" Use the global executables
let g:ale_use_global_executables = 1
let g:ale_linters = {
  \ 'python': ['flake8'],
  \ 'javascript': ['eslint'],
  \ 'c': ['clang'],
  \ 'cpp': ['clang'],
  \ 'json': ['jq'],
  \ 'rust': ['rust-analyzer']
  \}
let g:ale_fixers = {
  \ 'python': ['isort', 'black'],
  \ 'c': ['clang-format'],
  \ 'cpp': ['clang-format'],
  \ 'javascript': ['prettier'],
  \ 'yaml': ['yamlfix'],
  \ 'json': ['jq'],
  \ 'rust': ['rustfmt'],
  \ '*': ['trim_whitespace','remove_trailing_lines']
  \}
let g:ale_fix_on_save = 1

let g:ale_python_isort_options = '--use-parentheses'
let g:ale_python_flake8_options = '--max-line-length=88'

let g:ale_echo_msg_format = '%linter%[%code%]: %s'
" https://clang.llvm.org/docs/UsersManual.html#command-line-options
let g:all_c_clang_options = '-Wall -std=c11'
let g:ale_c_clangd_options = '-Wall -std=c11'

" change format options.  I want to train myself to prefer Google style code
let g:ale_c_clangformat_options = '-style="{BasedOnStyle: Google}"'
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
" }

" fugitive https://github.com/tpope/vim-fugitive {
nmap <leader>gs :G<CR>
nmap <leader>gh :diffget //3<CR>
nmap <leader>gu :diffget //2<CR>
" }

" Status line https://github.com/vim-airline/vim-airline {
if v:version >= 800
  " do not show error/warning colors when no errors/warnings
  let g:airline_skip_empty_sections = 1
  " overide default section z https://github.com/vim-airline/vim-airline/issues/272
  let g:airline_section_z = '%p%%'. " \ue0a1". '%l:%v'
  " choose custom theme in .vim/autoload/airline/themes/
  let g:airline_theme='powerline'
  " Fancy arrow symbols, requires a patched font
  let g:airline_powerline_fonts = 1
  " Show PASTE if in paste mode
  let g:airline_detect_paste=1
  " Don't take up extra space with +/-/~ of 0
  let g:airline#extensions#hunks#non_zero_only = 1
  " Limit wordcount to where it makes sense
  let g:airline#extensions#wordcount#filetypes = '\vhelp|markdown|pandoc|rst|org'
  " Fancy stuff in tabline as well
  " let g:airline#extensions#tabline#enabled = 1
endif
" }

" git@github.com:ervandew/supertab.git {
" :help supertab-completioncontexts
let g:SuperTabDefaultCompletionType = 'context'
" " let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabContextDefaultCompletionType = '<c-x><c-o>'
" "<c-n>" " default value <c-p>
" let g:SuperTabLongestEnhanced = 1 "(default value: 0)
" " When enabled and 'longest' is in your |completeopt| setting, supertab will
" " provide an enhanced longest match support where typing one or more letters and
" " hitting tab again while in a completion mode will complete the longest common
" " match using the new text in the buffer.

" let g:SuperTabLongestHighlight = 1 "(default value: 0)
" " Sets whether or not to pre-highlight the first match when completeopt has the
" " popup menu enabled and the 'longest' option as well. When enabled, <tab> will
" " kick off completion and pre-select the first entry in the popup menu, allowing
" " you to simply hit <enter> to use it.
"
" " https://github.com/ervandew/supertab#frequently-asked-questions
" " autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
" "}

" Jedi {
let g:jedi#smart_auto_mappings = 1
let g:jedi#show_call_signatures_delay = 200
let g:jedi#use_splits_not_buffers = 'right'
let g:jedi#goto_command = 'gd'
if trim(system('uname')) ==# 'Darwin'
  let g:python3_host_prog = '/usr/local/bin/python3'
else
  let g:python3_host_prog = '/usr/bin/python3'
endif

" }

" git@github.com:nathanaelkane/vim-indent-guides.git {
" highlighting of indented blocks
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_tab_guides = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'markdown', 'pandoc', 'man']
" }

" git@github.com:vim-pandoc/vim-pandoc.git {
"   requires: git@github.com:vim-pandoc/vim-pandoc-syntax.git
let g:pandoc#folding#level = 1

" }

" Go language {
" vim-go installed in .vim/pack/plugins/start
"   must also run (within vim) :GoUpdateBinaries
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
" }

" git@github.com:Shougo/deoplete.nvim.git {
" requires:
"   git@github.com:roxma/vim-hug-neovim-rpc.git
"   git@github.com:roxma/nvim-yarp.git
" set completeopt=longest,menuone,preview
" if v:version > 800
"   " https://github.com/zchee/deoplete-go#sample-initvim
"   set completeopt+=noselect
" endif
" let g:deoplete#enable_at_startup = 1
" call deoplete#enable()
"}

" https://github.com/racer-rust/vim-racer {
let g:racer_experimental_completer = 1
let g:racer_insert_paren = 1
augroup RUST
  au FileType rust nmap gd <Plug>(rust-def)
  au FileType rust nmap gs <Plug>(rust-def-split)
  au FileType rust nmap gx <Plug>(rust-def-vertical)
  au FileType rust nmap <leader>gd <Plug>(rust-doc)
augroup END
" }

" https://github.com/rust-lang/rust.vim {
" cargo fmt
" cargo +nightly fmt
let g:rustfmt_autosave = 1

" Mac OSX
" let g:rust_clip_command = 'pbcopy'
" Linux
" let g:rust_clip_command = 'xclip -selection clipboard'
" }

" https://github.com/junegunn/fzf {
if isdirectory(expand('~/.fzf'))
  set runtimepath^=~/.fzf
endif
" }

" https://github.com/nathanaelkane/vim-indent-guides {
let g:indent_guides_tab_guides = 0
"}

" Man {
source $VIMRUNTIME/ftplugin/man.vim
" }

if !isdirectory(expand('~/Documents/daily'))
  echom 'making daily directory'
  silent !mkdir ~/Documents/daily > /dev/null 2>&1
endif
" https://github.com/alok/notational-fzf-vim {
let g:nv_search_paths = ['~/Documents/daily/', './docs' , './notes.md']
"}

" https://github.com/ternjs/tern_for_vim
let g:tern#command = ['tern', '--persistent']
" Plugins }

" colors {
" colors are funky via ssh
" if $SSH_CLIENT == ""
" echo -en '\e]11;?\a'
" v:termrbgrsp
" dark: ^[]11;rgb:00/2b/36^G
" dark: ^[]11;rgb:0000/2b2b/3636^G
" light: ^[]11;rgb:fd/f6/e3^G
colorscheme solarized
set background=dark
"set background=light
" https://github.com/lifepillar/vim-solarized8/blob/master/colors/solarized8.vim
" set terminal so it shows same colors as background
if !has('gui')
  hi Terminal ctermfg=fg ctermbg=NONE cterm=NONE
endif

"if len(matchstr(v:termrbgresp, '00/2b/36'))
"  echom 'true'
"endif

"echom len(matchstr(v:termrbgresp, '00/2b/36'))
"echom len(matchstr(v:termrbgresp, 'fd/f6/e3'))
" TODO: this variable is empty
"echom 'background' . v:termrbgresp . ' color'

" TODO: not working
" if matchstr(v:termrbgresp, '00/2b/36')
"   set background=dark
" else
"   set background=light
" endif
" colors }

" MzScheme Support for Racket {
" Auto-instantiation of vimext module (can be placed in your |vimrc|): >
" function! MzRequire()
"   mz (require (prefix-in vim- 'vimext))
" endfunction
" causes seg fault, although in can be called after startup
" see error with lldb vim, compile with debug symbols for more info
" mzquantum default value 100ms, time between polls for mzscheme threads
" if has("mzscheme")
"   call MzRequire()
" endif
" }

if v:version > 800
  " add gitignore'd files to list
  let g:netrw_list_hide=netrw_gitignore#Hide()
  " Easy window navigation
  tmap <C-h> <C-w>h
  tmap <C-j> <C-w>j
  tmap <C-k> <C-w>k
  tmap <C-l> <C-w>l

endif

if filereadable('Session.vim')
  :silent source Session.vim
endif

" Digraphs
" https://devhints.io/vim-digraphs
" draw a box single frame
" insert mode <C-k> two-letter-code
" capital letters create double thick edges, [dr, Dr, dR, DR]
" dr  hh  dh  hh dl
" vv      vv     vv
" vr  hh  vh  hh vl
" vv      vv     vv
" ur  hh  uh  hh ul
" arrows <- ← -> →  !- ↑ -v ↓
" open daily journal file on Mac
" if trim(system('uname')) ==# 'Darwin'
"   :command! Daily :execute 'edit ' . $HOME . '/Dropbox\ (Leros\ Capital\ LLC)/Comcast/obsidian/daily/' . strftime("%F-%A") . '.md'
" endif
