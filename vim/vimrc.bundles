" vim: foldmarker={,} foldlevel=1 foldmethod=marker

" https://github.com/junegunn/vim-plug/wiki/faq
" install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/bundle')

" Plug List {

" https://github.com/altercation/vim-colors-solarized
Plug 'altercation/vim-colors-solarized'
" https://github.com/sheerun/vim-polyglot
" loads syntax on demand - replaces all other syntax plugins
Plug 'sheerun/vim-polyglot'
" vim-airline {
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'solarized'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#capslock#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
set noshowmode

"}
" vim-indent-guides {
" highlighting of indented blocks
Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'markdown', 'pandoc']
" }
" vim-pandoc {
" These plugins do not work on MAC OSX with default vim
" TODO: vim-pandoc needs update for python3
" replaced by polyglot
" Plug 'vim-pandoc/vim-pandoc', { 'for': 'pandoc' }
" Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'pandoc' }
" let g:pandoc#folding#level = 1
" au FileType pandoc setlocal tabstop=4
" au FileType pandoc setlocal shiftwidth=4
" au FileType pandoc setlocal softtabstop=4
" au FileType pandoc setlocal nospell
"}
" Tern plugin
Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
" https://goo.gl/To1TG3
" javascript-libraries-syntax {
" replaced by polyglot
" https://github.com/othree/javascript-libraries-syntax.vim
" Plug 'othree/javascript-libraries-syntax.vim', { 'for': 'javascript' }
" " default libraries are underscore,backbone,jquery
" let g:used_javascript_libs = 'underscore,backbone,jquery,express'
" " improved Javascript syntax support in Vim.(  this makes folding work)
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
" " Javascript Parameter Complete  https://github.com/othree/jspc.vim
" Plug 'othree/jspc.vim', { 'for': 'javascript' }
"}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Neomake - Async :make and linting framework for Neovim/Vim {
" (replaces syntastic for both vim and NeoVim)
Plug 'neomake/neomake'
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_python_enabled_makers = ['pep8', 'pylint']
let g:neomake_open_list = 2
" let g:neomake_html_tidy_ignore_errors = ['*empty*']
"let g:neomake_html_tidy_maker = { 'args': ['--drop-empty-elements', 'no'] }
" }

" line numbering
Plug 'myusuf3/numbers.vim'
" Software caps lock
Plug 'tpope/vim-capslock'

" Git integration
Plug 'tpope/vim-fugitive'
" quoting/parenthesizing made simple
Plug 'tpope/vim-surround'
"enable repeating supported plugin maps
Plug 'tpope/vim-repeat'
" Highlight colors in css files
Plug 'ap/vim-css-color'
" Liquid templates
Plug 'tpope/vim-liquid', { 'for': 'liquid' }
" https://github.com/mustache/vim-mustache-handlebars
Plug 'mustache/vim-mustache-handlebars'
" replaced by polyglot
" " https://github.com/fatih/vim-go
" Plug 'fatih/vim-go'
" " https://github.com/rust-lang/rust.vim
" Plug 'rust-lang/rust.vim'
" https://github.com/ivanov/vim-ipython
Plug 'ivanov/vim-ipython'
" extended % matching for HTML, LaTeX, and many other languages
" http://www.vim.org/scripts/script.php?script_id=39
if !has('nvim')
  packadd! matchit
endif

"nvim plugins
if has("nvim")
  " ONLY neovim
  " deoplete Dark powered asynchronous completion framework for neovim {
  " https://github.com/Shougo/deoplete.nvim
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
  let g:deoplete#omni#functions = {}
  let g:deoplete#omni#functions.javascript = [
    \ 'tern#Complete',
    \ 'jspc#omni'
  \]
  set completeopt=longest,menuone,preview
  let g:deoplete#sources = {}
  let g:deoplete#sources.javascript = ['file', 'tag', 'ternjs', 'ultisnips' ]
  let g:tern_request_timeout = 1
  let g:tern_show_signature_in_pum = '0'  " This do disable full signature type on autocomplete
  let g:tern#command = ['tern']
  let g:tern#arguments = ['--persistent']

  autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
  let g:UltiSnipsExpandTrigger="<C-j>"
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  "https://github.com/zchee/deoplete-clang
  let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-3.8/lib/clang'

  "call deoplete#enable_logging('DEBUG', 'deoplete.log')
  " }
  " https://github.com/zchee/deoplete-jedi
  Plug 'zchee/deoplete-jedi', { 'for': ['python' ,'python3'] }
  " https://github.com/carlitux/deoplete-ternjs
  Plug 'carlitux/deoplete-ternjs', { 'for': 'javascript' }
  " https://github.com/zchee/deoplete-clang
  Plug 'zchee/deoplete-clang', { 'for': ['cpp', 'c'] }
  " https://floobits.com/help/plugins/nvim
  Plug 'floobits/floobits-neovim', { 'do': ':UpdateRemotePlugins' }
else
  " ONLY vim
"   YouCompleteMe A code-completion engine for Vim {
"   http://valloric.github.io/YouCompleteMe/
  "Plug 'Valloric/YouCompleteMe', { 'do': 'python3 ./install.py --tern-completer' }
"   " this will disable ycm let g:loaded_youcompleteme = 1
"   " https://github.com/Valloric/YouCompleteMe/issues/700
  "let g:ycm_global_ycm_extra_conf = './third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
  "let g:ycm_key_list_select_completion = ['<TAB>', '<ENTER>']
  "let g:ycm_key_list_previous_completion = ['<S-TAB>']
  "let g:EclimCompletionMethod = 'omnifunc'
  "let g:ycm_python_binary_path = 'python'
  "let g:ycm_server_python_interpreter = '/usr/bin/python'
  "let g:ycm_server_keep_logfiles = 1
"   "}
"  Neocomplete {
"  Plug 'Shougo/neocomplete.vim'
"  Plug 'Shougo/neosnippet.vim'
"  Plug 'Shougo/neosnippet-snippets'
"" https://github.com/Shougo/neocomplete.vim
"" Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" Use neocomplete.
"let g:neocomplete#enable_at_startup = 1
"" Use smartcase.
"let g:neocomplete#enable_smart_case = 1
"" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"
"" Define dictionary.
"let g:neocomplete#sources#dictionary#dictionaries = {
"    \ 'default' : '',
"    \ 'vimshell' : $HOME.'/.vimshell_hist',
"    \ 'scheme' : $HOME.'/.gosh_completions'
"        \ }
"
"" Define keyword.
"if !exists('g:neocomplete#keyword_patterns')
"    let g:neocomplete#keyword_patterns = {}
"endif
"let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
"" Plugin key-mappings.
"inoremap <expr><C-g>     neocomplete#undo_completion()
"inoremap <expr><C-l>     neocomplete#complete_common_string()
"
"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
"  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"  " For no inserting <CR> key.
"  "return pumvisible() ? "\<C-y>" : "\<CR>"
"endfunction
"" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"" Close popup by <Space>.
""inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"
"" AutoComplPop like behavior.
""let g:neocomplete#enable_auto_select = 1
"
"" Shell like behavior(not recommended).
""set completeopt+=longest
""let g:neocomplete#enable_auto_select = 1
""let g:neocomplete#disable_auto_complete = 1
""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
"
"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
"autocmd FileType python setlocal omnifunc=jedi#completions
"  let g:jedi#completions_enabled = 0
"  let g:jedi#auto_vim_configuration = 0
"  let g:jedi#smart_auto_mappings = 0
"  let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
"  " alternative pattern: '\h\w*\|[^. \t]\.\w*'
"
"" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
"  let g:neocomplete#sources#omni#input_patterns = {}
"endif
""let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
""let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"
"" For perlomni.vim setting.
"" https://github.com/c9s/perlomni.vim
"" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"}
endif
" Disabled configurations {
  Plug 'maralla/completor.vim' "{
  let g:completor_python_binary = '/usr/bin/python3'
  let g:completor_node_binary =  '/home/antonios/.nvm/versions/node/v6.10.0/bin/node'
  let g:completor_clang_binary = '/usr/bin/clang'
  " Use Tab to select completion
  inoremap <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
" Use Tab to trigger completion (disable auto trigger) these lines below do not help
  let g:completor_auto_trigger = 0
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
"  }
" Goyo - Distraction-free writing in Vim {
" https://github.com/junegunn/goyo.vim
"Plug 'junegunn/goyo.vim', { 'for': 'pandoc' }
"" let g:goyo_linenr = 1
"function! s:goyo_enter()
"  set nonumber
"  set norelativenumber
"endfunction
"
"function! s:goyo_leave()
"  set number
"  set relativenumber
"endfunction
"
"autocmd! User GoyoEnter nested call <SID>goyo_enter()
"autocmd! User GoyoLeave nested call <SID>goyo_leave()
"}
" syntastic configuration {
"Plug 'scrooloose/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"" # pylint: disable=C0301 can be used inside a file to disable warnings
"" let g:syntastic_python_pylint_args = '--disable=C0301,E501'
"let g:syntastic_python_checkers=['pylint', 'flake8', 'pyflakes', 'python']
"let g:syntastic_python_python_exec = '/usr/bin/python3'
"let g:syntastic_python_pylint_exe = 'python3 -m pylint'
"" html checkers
"let g:syntastic_html_tidy_ignore_errors=['proprietary attribute', 'trimming empty <span>'] ", 'trimming empty <i>'
"" javascript checker
"" https://www.npmjs.com/package/xo#editor-plugins
""let g:syntastic_javascript_eslint_generic = 1
""let g:syntastic_javascript_eslint_exec = 'xo'
""let g:syntastic_javascript_eslint_args = '--reporter=compact'
"let g:syntastic_javascript_checkers = ['eslint']
"" recommended settings from syntastic manual
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_aggregate_errors = 1

"}
"} end disabled
" } end bundle list

" All of your Plugs must be added before the following line
call plug#end()            " required

