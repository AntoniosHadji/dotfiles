" vim: foldmarker={,} foldlevel=1 foldmethod=marker

" jedi-vim installed in .vim/pack/plugins/start/
" vim-go installed in .vim/pack/plugins/start using new vim8 package manager
" 2018-08-02 21:30:27 -0400 set to version v1.18
" must also run (within vim) :GoUpdateBinaries

" https://github.com/junegunn/vim-plug/wiki/faq
" install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/bundle')

" Plug List {
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" https://github.com/altercation/vim-colors-solarized
" solarized.vim can be placed in colors directory
" function toggleBG must also be saved if wanted
Plug 'altercation/vim-colors-solarized'
" line numbering
Plug 'myusuf3/numbers.vim'
" Software caps lock
Plug 'tpope/vim-capslock'
" quoting/parenthesizing made simple
Plug 'tpope/vim-surround'
" enable repeating supported plugin maps
Plug 'tpope/vim-repeat'
" Highlight colors in css files
Plug 'ap/vim-css-color'
" Git integration
Plug 'tpope/vim-fugitive'
" Track the engine.
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" vim-airline {
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'solarized'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#capslock#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
" https://github.com/vim-airline/vim-airline#smarter-tab-line
set noshowmode
set laststatus=2
set encoding=utf-8

"}

" vim-indent-guides {
" highlighting of indented blocks
Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'markdown', 'pandoc']
" }

" vim-pandoc {
" These plugins do not work on MAC OSX with default vim
Plug 'vim-pandoc/vim-pandoc', { 'for': ['pandoc', 'markdown'] }
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': ['pandoc', 'markdown'] }
let g:pandoc#folding#level = 1
"}


" Neomake - Async :make and linting framework for Neovim/Vim {
" (replaces syntastic for both vim and NeoVim)
Plug 'neomake/neomake'
" https://github.com/neomake/neomake/wiki/Makers
let g:neomake_javascript_enabled_makers = ['standard']
let g:neomake_javascript_jsx_enabled_makers = ['standard']
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_open_list = 2
let g:neomake_list_height = 2

" html linters: tidy, htmlhint
" https://github.com/htacg/tidy-html5
" https://github.com/yaniswang/HTMLHint

" *neomake-makers-properties*
" *g:neomake_<name>_<property>*
" *g:neomake_<ft>_<name>_<property>*
" Configure properties for a maker where <property> is one of `exe`, `args`,
" `errorformat`, `buffer_output`, `remove_invalid_entries` or `append_file`.
" let g:neomake_python_pep8_args = '--ignore=E501'
" }


" Update the bult-in CSS complete function to latest CSS standard.
" https://github.com/othree/csscomplete.vim
Plug 'othree/csscomplete.vim'
autocmd FileType css setlocal omnifunc+=csscomplete#CompleteCSS noci

" Liquid templates
Plug 'tpope/vim-liquid', { 'for': 'liquid' }
" https://github.com/mustache/vim-mustache-handlebars
Plug 'mustache/vim-mustache-handlebars', { 'for': 'html.mustache' }


Plug 'https://github.com/tmhedberg/SimpylFold', { 'for': 'python' }
let g:SimpylFold_docstring_preview = 1
let g:SimpylFold_fold_docstring = 0



" deoplete Dark powered asynchronous completion framework for neovim {
if has("nvim")
  " ONLY neovim
  " https://github.com/Shougo/deoplete.nvim
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  " ONLY vim8
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" Use deoplete.
let g:deoplete#enable_at_startup = 1

set completeopt=longest,menuone,preview
" https://github.com/zchee/deoplete-go#sample-initvim
set completeopt+=noselect
" https://github.com/zchee/deoplete-jedi
Plug 'zchee/deoplete-jedi', { 'for': 'python'}
let g:jedi#completions_enabled = 0

" Tern plugin
Plug 'ternjs/tern_for_vim'
", { 'for': ['javascript', 'javascript.jsx'] }
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
" " Javascript Parameter Complete  https://github.com/othree/jspc.vim
Plug 'othree/jspc.vim'
" , { 'for': ['javascript', 'javascript.jsx'] }
" https://github.com/carlitux/deoplete-ternjs
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern'}
" , 'for': ['javascript', 'javascript.jsx'] }

" https://github.com/zchee/deoplete-clang
Plug 'zchee/deoplete-clang', { 'for': ['cpp', 'c'] }
" https://github.com/zchee/deoplete-go
Plug 'zchee/deoplete-go', { 'do': 'make', 'for': 'go' }
" https://github.com/sebastianmarkow/deoplete-rust
Plug 'sebastianmarkow/deoplete-rust', { 'for': 'rust' }

let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode' "'/home/antonios/go/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']

" let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
Plug 'ervandew/supertab'
let g:SuperTabContextDefaultCompletionType = "<c-n>" " default value <c-p>
" https://github.com/ervandew/supertab#frequently-asked-questions
" autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsExpandTrigger="<C-j>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [ 'tern#Complete' , 'jspc#omni']
let g:deoplete#sources = {}
let g:deoplete#sources.javascript = ['file', 'tag', 'ternjs', 'ultisnips' ]
let g:deoplete#sources['javascript.jsx'] = ['file', 'tag', 'ternjs', 'ultisnips' ]
let g:tern_request_timeout = 1
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ ]
" Whether to include the types of the completions in the result data.
" Default: 0
let g:deoplete#sources#ternjs#types = 1
" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1
" Whether to use a case-insensitive compare between the current word and potential completions.
" Default: 0
let g:deoplete#sources#ternjs#case_insensitive = 1
" Whether to include JavaScript keywords when completing something that is not a property.
" Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1


"https://github.com/zchee/deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-6.0/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-6.0/lib/clang'

" https://github.com/sebastianmarkow/deoplete-rust
let g:deoplete#sources#rust#racer_binary='/home/antonios/.cargo/bin/racer'
" $(rustup --print sysroot)/lib/rustlib/src/rust/src
let g:deoplete#sources#rust#rust_source_path='/home/antonios/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
" }

" All of your Plugs must be added before the following line
call plug#end()            " required

" when reading and writing no delay (add ', 100' for 100 ms delay )
call neomake#configure#automake('rw')

" Disabled configurations {
" javascript-libraries-syntax {
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
" https://goo.gl/To1TG3
" https://github.com/othree/javascript-libraries-syntax.vim
" Plug 'othree/javascript-libraries-syntax.vim', { 'for': 'javascript' }
" " default libraries are underscore,backbone,jquery
" let g:used_javascript_libs = 'underscore,backbone,jquery,express'
" " improved Javascript syntax support in Vim.(  this makes folding work)
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
"}
" Ledger support {
" Plug 'https://github.com/ledger/vim-ledger'
" }
" Goyo - Distraction-free writing in Vim {
" https://github.com/junegunn/goyo.vim
"Plug 'junegunn/goyo.vim', { 'for': 'pandoc' }
"" let g:goyo_linenr = 1
"function! s:goyo_enter()
"  set nonumber
"  set norelativenumber
"endfunction
"
"function! s:goyo_leave()
"  set number
"  set relativenumber
"endfunction
"
"autocmd! User GoyoEnter nested call <SID>goyo_enter()
"autocmd! User GoyoLeave nested call <SID>goyo_leave()
"}
" syntastic configuration {
"Plug 'scrooloose/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"" # pylint: disable=C0301 can be used inside a file to disable warnings
"" let g:syntastic_python_pylint_args = '--disable=C0301,E501'
"let g:syntastic_python_checkers=['pylint', 'flake8', 'pyflakes', 'python']
"let g:syntastic_python_python_exec = '/usr/bin/python3'
"let g:syntastic_python_pylint_exe = 'python3 -m pylint'
"" html checkers
"let g:syntastic_html_tidy_ignore_errors=['proprietary attribute', 'trimming empty <span>'] ", 'trimming empty <i>'
"" javascript checker
"" https://www.npmjs.com/package/xo#editor-plugins
""let g:syntastic_javascript_eslint_generic = 1
""let g:syntastic_javascript_eslint_exec = 'xo'
""let g:syntastic_javascript_eslint_args = '--reporter=compact'
"let g:syntastic_javascript_checkers = ['eslint']
"" recommended settings from syntastic manual
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_aggregate_errors = 1

"}
" vim-polyglot loads syntax on demand - replaces all other syntax plugins {
" Plug 'https://github.com/sheerun/vim-polyglot'
" use full go plugin instead of polyglot
" let g:polyglot_disabled = ['go', 'python', 'python3']
" }
" OrgMode Support {
" Plug 'jceb/vim-orgmode', { 'for': 'org' }
" " OrgMode suggested plugins
" Plug 'vim-scripts/utl.vim', { 'for': 'org' }
" " https://github.com/tpope/vim-repeat already installed
" Plug 'https://github.com/majutsushi/tagbar'
" Plug 'https://github.com/tpope/vim-speeddating'
" Plug 'https://github.com/chrisbra/NrrwRgn', { 'for': 'org' }
" Plug 'https://github.com/mattn/calendar-vim'
" Plug 'https://github.com/inkarkat/vim-SyntaxRange', { 'for': 'org' }
" }
"
"} end disabled
" } end bundle list


