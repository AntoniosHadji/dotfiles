" vim: foldmarker={,} foldlevel=1 foldmethod=marker

" https://github.com/junegunn/vim-plug/wiki/faq
" install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/bundle')

" Plug List {

" https://github.com/altercation/vim-colors-solarized
Plug 'altercation/vim-colors-solarized'
" loads syntax on demand - replaces all other syntax plugins
Plug 'https://github.com/sheerun/vim-polyglot'
" replaced by polyglot
" Plug 'https://github.com/fatih/vim-go'
" Plug 'https://github.com/rust-lang/rust.vim'
" vim-airline {
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme = 'solarized'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#capslock#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
set noshowmode
set laststatus=2
set encoding=utf-8

"}
" vim-indent-guides {
" highlighting of indented blocks
Plug 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'markdown', 'pandoc']
" }
" vim-pandoc {
" These plugins do not work on MAC OSX with default vim
" TODO: vim-pandoc needs update for python3
Plug 'vim-pandoc/vim-pandoc', { 'for': 'pandoc' }
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'pandoc' }
let g:pandoc#folding#level = 1
"}
" Tern plugin
Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }

" replaced by polyglot
" javascript-libraries-syntax {
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
" https://goo.gl/To1TG3
" https://github.com/othree/javascript-libraries-syntax.vim
" Plug 'othree/javascript-libraries-syntax.vim', { 'for': 'javascript' }
" " default libraries are underscore,backbone,jquery
" let g:used_javascript_libs = 'underscore,backbone,jquery,express'
" " improved Javascript syntax support in Vim.(  this makes folding work)
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
" " Javascript Parameter Complete  https://github.com/othree/jspc.vim
" Plug 'othree/jspc.vim', { 'for': 'javascript' }
"}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Neomake - Async :make and linting framework for Neovim/Vim {
" (replaces syntastic for both vim and NeoVim)
Plug 'neomake/neomake'
" these are already loaded by default
" let g:neomake_python_enabled_makers = ['pylint', 'pycodestyle', 'pydocstyle']
let g:neomake_javascript_enabled_makers = ['standard']
let g:neomake_javascript_jsx_enabled_makers = ['standard']
" let g:neomake_open_list = 2

" *neomake-makers-properties*
" *g:neomake_<name>_<property>*
" *g:neomake_<ft>_<name>_<property>*
" Configure properties for a maker where <property> is one of `exe`, `args`,
" `errorformat`, `buffer_output`, `remove_invalid_entries` or `append_file`.
" let g:neomake_python_pep8_args = '--ignore=E501'
" }

" line numbering
Plug 'myusuf3/numbers.vim'
" Software caps lock
Plug 'tpope/vim-capslock'

" Git integration
Plug 'tpope/vim-fugitive'
" quoting/parenthesizing made simple
Plug 'tpope/vim-surround'
"enable repeating supported plugin maps
Plug 'tpope/vim-repeat'
" Highlight colors in css files
Plug 'ap/vim-css-color'
" Liquid templates
Plug 'tpope/vim-liquid', { 'for': 'liquid' }
" https://github.com/mustache/vim-mustache-handlebars
Plug 'mustache/vim-mustache-handlebars'

" vim-go installed in .vim/pack/plugins/start using new vim8 package manager
" OrgMode Support {
Plug 'jceb/vim-orgmode', { 'for': 'org' }
" OrgMode suggested plugins
Plug 'vim-scripts/utl.vim', { 'for': 'org' }
" https://github.com/tpope/vim-repeat already installed
Plug 'https://github.com/majutsushi/tagbar'
Plug 'https://github.com/tpope/vim-speeddating'
Plug 'https://github.com/chrisbra/NrrwRgn', { 'for': 'org' }
Plug 'https://github.com/mattn/calendar-vim'
Plug 'https://github.com/inkarkat/vim-SyntaxRange', { 'for': 'org' }
" }

" Python specific {
" Plug 'https://github.com/python-mode/python-mode', { 'for': ['python' ,'python3'] }
" let g:pymode_python = 'python3'
Plug 'https://github.com/tmhedberg/SimpylFold', { 'for': 'python'}
let g:SimpylFold_docstring_preview = 1
let g:SimpylFold_fold_docstring = 0
" }

" Ledger support {
Plug 'https://github.com/ledger/vim-ledger'
" }

"nvim plugins
if has("nvim")
  " ONLY neovim
  " deoplete Dark powered asynchronous completion framework for neovim {
  " https://github.com/Shougo/deoplete.nvim
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  " ONLY vim8
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" https://github.com/zchee/deoplete-jedi
Plug 'zchee/deoplete-jedi', { 'for': ['python' ,'python3'] }
" https://github.com/carlitux/deoplete-ternjs
Plug 'carlitux/deoplete-ternjs', { 'for': 'javascript' }
" https://github.com/zchee/deoplete-clang
Plug 'zchee/deoplete-clang', { 'for': ['cpp', 'c'] }

" Use deoplete.
let g:deoplete#enable_at_startup = 1
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
\]
set completeopt=longest,menuone,preview
let g:deoplete#sources = {}
let g:deoplete#sources.javascript = ['file', 'tag', 'ternjs', 'ultisnips' ]
let g:tern_request_timeout = 1
let g:tern_show_signature_in_pum = '0'  " This do disable full signature type on autocomplete
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
let g:UltiSnipsExpandTrigger="<C-j>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"https://github.com/zchee/deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-3.8/lib/clang'

"call deoplete#enable_logging('DEBUG', 'deoplete.log')
" }

" Disabled configurations {
" Goyo - Distraction-free writing in Vim {
" https://github.com/junegunn/goyo.vim
"Plug 'junegunn/goyo.vim', { 'for': 'pandoc' }
"" let g:goyo_linenr = 1
"function! s:goyo_enter()
"  set nonumber
"  set norelativenumber
"endfunction
"
"function! s:goyo_leave()
"  set number
"  set relativenumber
"endfunction
"
"autocmd! User GoyoEnter nested call <SID>goyo_enter()
"autocmd! User GoyoLeave nested call <SID>goyo_leave()
"}
" syntastic configuration {
"Plug 'scrooloose/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"" # pylint: disable=C0301 can be used inside a file to disable warnings
"" let g:syntastic_python_pylint_args = '--disable=C0301,E501'
"let g:syntastic_python_checkers=['pylint', 'flake8', 'pyflakes', 'python']
"let g:syntastic_python_python_exec = '/usr/bin/python3'
"let g:syntastic_python_pylint_exe = 'python3 -m pylint'
"" html checkers
"let g:syntastic_html_tidy_ignore_errors=['proprietary attribute', 'trimming empty <span>'] ", 'trimming empty <i>'
"" javascript checker
"" https://www.npmjs.com/package/xo#editor-plugins
""let g:syntastic_javascript_eslint_generic = 1
""let g:syntastic_javascript_eslint_exec = 'xo'
""let g:syntastic_javascript_eslint_args = '--reporter=compact'
"let g:syntastic_javascript_checkers = ['eslint']
"" recommended settings from syntastic manual
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_aggregate_errors = 1

"}
"} end disabled
" } end bundle list

" All of your Plugs must be added before the following line
call plug#end()            " required

