" vim: foldmarker={,} foldlevel=1 foldmethod=marker

" TODO: do I really need these plugins? {
"" Software caps lock
"Plug 'tpope/vim-capslock'
"" quoting/parenthesizing made simple
"Plug 'tpope/vim-surround'
"" enable repeating supported plugin maps
"Plug 'tpope/vim-repeat'
"" Highlight colors in css files
"" Plug 'ap/vim-css-color'
"" Git integration
"Plug 'tpope/vim-fugitive'
"" Track the engine.
"Plug 'SirVer/ultisnips'
"" Snippets are separated from the engine. Add this if you want them:
"Plug 'honza/vim-snippets'
"" searching with ctrl + p
"Plug 'kien/ctrlp.vim'
"
" What can nerdtree do that vim file manager can not?
" Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
"}

" CSS {
" Update the bult-in CSS complete function to latest CSS standard.
" https://github.com/othree/csscomplete.vim
Plug 'othree/csscomplete.vim'
" help autocmd-patterns
autocmd FileType *.css,*.scss,*.html setlocal omnifunc+=csscomplete#CompleteCSS noci
" }

" HTML template languages {
" Liquid templates
Plug 'tpope/vim-liquid', { 'for': 'liquid' }
" https://github.com/mustache/vim-mustache-handlebars
Plug 'mustache/vim-mustache-handlebars', { 'for': 'html.mustache' }
"}

" Python {
Plug 'https://github.com/tmhedberg/SimpylFold', { 'for': 'python' }
let g:SimpylFold_docstring_preview = 1
let g:SimpylFold_fold_docstring = 0
" https://github.com/zchee/deoplete-jedi
Plug 'zchee/deoplete-jedi', { 'for': 'python'}
let g:jedi#completions_enabled = 0
"}

" JavaScript {
" Tern plugin
Plug 'ternjs/tern_for_vim'
", { 'for': ['javascript', 'javascript.jsx'] }
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
" " Javascript Parameter Complete  https://github.com/othree/jspc.vim
Plug 'othree/jspc.vim'
" , { 'for': ['javascript', 'javascript.jsx'] }
" https://github.com/carlitux/deoplete-ternjs
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern'}
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [ 'tern#Complete' , 'jspc#omni']
let g:deoplete#sources = {}
let g:deoplete#sources.javascript = ['file', 'tag', 'ternjs', 'ultisnips' ]
let g:deoplete#sources['javascript.jsx'] = ['file', 'tag', 'ternjs', 'ultisnips' ]
let g:tern_request_timeout = 1
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
                \ 'jsx',
                \ 'javascript.jsx',
                \ 'html',
                \ ]
" Whether to include the types of the completions in the result data.
" Default: 0
let g:deoplete#sources#ternjs#types = 1
" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1
" Whether to use a case-insensitive compare between the current word and potential completions.
" Default: 0
let g:deoplete#sources#ternjs#case_insensitive = 1
" Whether to include JavaScript keywords when completing something that is not a property.
" Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1

" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
"let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsExpandTrigger="<C-j>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" }

" C lang {
" https://github.com/zchee/deoplete-clang
Plug 'zchee/deoplete-clang', { 'for': ['cpp', 'c'] }
"https://github.com/zchee/deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-6.0/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-6.0/lib/clang'
"
" }
"
" Go lang {
" https://github.com/zchee/deoplete-go
Plug 'zchee/deoplete-go', { 'do': 'make', 'for': 'go' }
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode' "'/home/antonios/go/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
"
" }
"
" Rust {
" https://github.com/sebastianmarkow/deoplete-rust
Plug 'sebastianmarkow/deoplete-rust', { 'for': 'rust' }
" https://github.com/sebastianmarkow/deoplete-rust
let g:deoplete#sources#rust#racer_binary='/home/antonios/.cargo/bin/racer'
" $(rustup --print sysroot)/lib/rustlib/src/rust/src
let g:deoplete#sources#rust#rust_source_path='/home/antonios/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
"
" }
"
"
" https://github.com/junegunn/vim-plug/wiki/faq
" install vim-plug
" if empty(glob('~/.vim/autoload/plug.vim'))
"   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
"     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" endif
" 
" call plug#begin('~/.vim/bundle')

" Plug List {

" deoplete Dark powered asynchronous completion framework for neovim {
" if has("nvim")
"   " ONLY neovim
"   " https://github.com/Shougo/deoplete.nvim
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   " ONLY vim8
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
" Use deoplete.
" }









" All of your Plugs must be added before the following line
" call plug#end()            " required

" when reading and writing no delay (add ', 100' for 100 ms delay )
" call neomake#configure#automake('rw')

" } end bundle list

