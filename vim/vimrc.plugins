"All setup configurations for vim plugins; sourced after .vimrc {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker foldminlines=2:
"}

" vim-airline {
let g:airline_theme='solarized'
let g:airline_powerline_fonts=1
let g:airline#extensions#capslock#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:airline_symbols = get(g:,'airline_symbols',{})
let g:airline_symbols.maxlinenr=''

" set laststatus=2 "2 is default
set noshowmode

"}

" vim-indent-guides {
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guides = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'markdown', 'pandoc']
" }

" vim-pandoc {
let g:pandoc#folding#level = 1
au FileType pandoc setlocal tabstop=4
au FileType pandoc setlocal shiftwidth=4
au FileType pandoc setlocal softtabstop=4
au FileType pandoc setlocal nospell
"}

" vim-colors-solarized {
" https://github.com/huyz/dircolors-solarized
" http://www.xorcode.com/2011/04/11/solarized-vim-eclipse-ubuntu/
" https://github.com/sigurdga/gnome-terminal-colors-solarized
" http://askubuntu.com/questions/67/how-do-i-enable-full-color-support-in-vim
set t_Co=16         "Override gnome-terminal 3.6 reporting only 8 colors, set to 16 or 256
" call this function to enable ToggleBG command
call togglebg#map("<F5>")

" https://benjamintanweihao.github.io/blog/2014/04/10/switch-solarized-light-slash-dark-depending-on-the-time-of-day/
" modified by me based on experimentation 1/8/2015
" this was in the original - removed because this is needed in both terminal
" and gvim -- has('gui_running') &&
let hour = strftime("%H")
let minute = strftime("%M")
let second = strftime("%S")
if hour >= 17
  set background=light
else
  set background=dark
endif

if has('nvim')
  if hour < 17
    func ColorHandler(timer)
      set background=light
    endfunction
    let timer = timer_start((17-hour)*60*60*1000-(minute*60*1000)-(second*1000), 'ColorHandler')
  endif
endif
colorscheme solarized
" }

" The Silver Searcher {
" https://robots.thoughtbot.com/faster-grepping-in-vim#override-to-use-the-silver-searcher
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag over grep - reccomend by thoughtbot
  " set grepprg=ag\ --nogroup\ --nocolor
  " reccommend in ag man page
  set grepprg=ag\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
"}

" Calendar {
let g:calendar_first_day = "monday"
" }

" Goyo {
" https://github.com/junegunn/goyo.vim
" let g:goyo_linenr = 1
function! s:goyo_enter()
  set nonumber
  set norelativenumber
endfunction

function! s:goyo_leave()
  set number
  set relativenumber
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
"}

" YouCompleteMe {
" this will disable ycm
if has('nvim')
 let g:loaded_youcompleteme = 1
endif
" https://github.com/Valloric/YouCompleteMe/issues/700
" let g:ycm_global_ycm_extra_conf = './third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
"let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']
let g:EclimCompletionMethod = 'omnifunc'
"let g:ycm_python_binary_path = 'python3'
"let g:ycm_server_python_interpreter = '/usr/bin/python3'
let g:ycm_server_keep_logfiles = 1
"}

" Plugin 'othree/javascript-libraries-syntax.vim' {
" default libraries are underscore,backbone,jquery
let g:used_javascript_libs = 'underscore,backbone,jquery,express'
"}

" syntastic configuration {
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" # pylint: disable=C0301 can be used inside a file to disable warnings
" let g:syntastic_python_pylint_args = '--disable=C0301,E501'
let g:syntastic_python_checkers=['pylint', 'flake8', 'pyflakes', 'python']
let g:syntastic_python_python_exec = '/usr/bin/python3'
let g:syntastic_python_pylint_exe = 'python3 -m pylint'
" html checkers
let g:syntastic_html_tidy_ignore_errors=['proprietary attribute', 'trimming empty <span>'] ", 'trimming empty <i>'
" javascript checker
" https://www.npmjs.com/package/xo#editor-plugins
"let g:syntastic_javascript_eslint_generic = 1
"let g:syntastic_javascript_eslint_exec = 'xo'
"let g:syntastic_javascript_eslint_args = '--reporter=compact'
let g:syntastic_javascript_checkers = ['eslint']
" recommended settings from syntastic manual
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

"}

" Neomake (replaces syntastic for both vim and NeoVim) {
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_open_list = 2
" let g:neomake_html_tidy_ignore_errors = ['*empty*']
"let g:neomake_html_tidy_maker = { 'args': ['--drop-empty-elements', 'no'] }
autocmd! BufWritePost * Neomake
" }

" NeoVim Plugins {
if has('nvim')
  " deoplete {
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
  let g:deoplete#omni#functions = {}
  let g:deoplete#omni#functions.javascript = [
    \ 'tern#Complete',
    \ 'jspc#omni'
  \]
  set completeopt=longest,menuone,preview
  let g:deoplete#sources = {}
  let g:deoplete#sources.javascript = ['file', 'tag', 'ternjs', 'ultisnips' ]
  let g:tern_request_timeout = 1
  let g:tern_show_signature_in_pum = '0'  " This do disable full signature type on autocomplete
  let g:tern#command = ['tern']
  let g:tern#arguments = ['--persistent']

  autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
  let g:UltiSnipsExpandTrigger="<C-j>"
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  "https://github.com/zchee/deoplete-clang
  let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-3.8/lib/clang'

  "call deoplete#enable_logging('DEBUG', 'deoplete.log')
  " }
endif
"}
