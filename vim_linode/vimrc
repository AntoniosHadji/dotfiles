" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
" runtime! debian.vim
" START debiam.vim {{{

" Debian system-wide default configuration Vim

set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible        " Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start  " more powerful backspacing

" Now we set some defaults for the editor
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time

" modelines have historically been a source of security/resource
" vulnerabilities -- disable by default, even when 'nocompatible' is set
" active by default but I use modelines
" set nomodeline

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
" END debian.vim }}}

" BEGIN /etc/vim/vimrc {{{
" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set smartcase           " Do smart case matching
set incsearch           " Incremental search
set autowrite           " Automatically save before commands like :next and :make
set hidden              " Hide buffers when they are abandoned
set mouse=a             " Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
" END /etc/vim/vimrc }}}

" START Customization {{{
" HELP http://vimhelp.appspot.com/options.txt.html#%27wildignore%27
set wildmenu                    " Show list instead of just completing
" Command <Tab> completion, list matches, then longest common part, then all.
set wildmode=list:longest,full
" https://bitbucket.org/sjl/dotfiles/src/cbbbc897e9b3/vim/vimrc
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.class                          " Java byte code

set ttimeout                    " time out for key codes
set ttimeoutlen=100             " wait up to 100ms after Esc for special key

set virtualedit=onemore         " Allow for cursor beyond last character
set autowriteall                " Write files before many actions :help awa

" Setup clipboard to work with desktop copy / paste {
" default registers: * is primary + is clipboard
" if system('uname -s') == 'Linux\n' " && !has('nvim')       has ('x') && has ('gui')  On Linux use + register for copy-paste
" unamed = * (primary X11) unnamedplus = + (clipboard X11)
" Why would I want these to be different? separate yank from delete, change
" help clipboard-unnamed clipboard-unnamedplus clipboard x11-selection
set clipboard=unnamed
set clipboard+=unnamedplus

set cursorline                  " Highlight current line
set number                      " show line numbers

set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set foldenable                  " Auto fold code
"  To insert special character - in insert mode CTRL-K two character code from :digraphs command
set listchars=tab:›\ ,trail:∙,nbsp:†,extends:»,precedes:« "nvim defaults to tab:> ,trail:-,nbsp:+
set list
set colorcolumn=80              " highlight 80 character width for code files

set expandtab                   " expand tabs to spaces


if has('persistent_undo')
        " undodir set from spf13
        set undofile
        set undolevels=1000
        " no undo files left in CWD
        if !isdirectory(expand("~/.vim/undo/"))
                " help mkdir for more information on use
                call mkdir(expand("~/.vim/undo/"), "p")
        endif
        set undodir=~/.vim/undo//
endif

set backup                  "See :help backup
" no backup files left in CWD
if !isdirectory(expand("~/.vim/backup/"))
        call mkdir(expand("~/.vim/backup/"), "p")
endif
set backupdir=~/.vim/backup//
" no swap files left in CWD
if !isdirectory(expand("~/.vim/swap/"))
        call mkdir(expand("~/.vim/swap/"), "p")
endif
set directory=~/.vim/swap//

" Neovim settings to make latest vim work like Neovim {
if !has('nvim')
  " nvim defaults {
  set autoindent          " always autoindent
  set autoread            " auto re-load files when changed on disk https://github.com/square/maximum-awesome
  " - 'complete' doesn't include 'i'
  " - 'display' defaults to 'lastline'
  set history=10000       " command history length extra long
  set hlsearch            " highlight search terms :noh to clear
  set ttyfast             " nvim default
  " }

  " https://neovim.io/doc/user/options.html
  if v:version >= 704
    set formatoptions+=tcqj     " https://neovim.io/doc/user/options.html#'formatoptions'
    set langnoremap             " https://neovim.io/doc/user/options.html#'langnoremap'
    set laststatus=2            " https://neovim.io/doc/user/options.html#'laststatus'
    " https://neovim.io/doc/user/options.html#'sessionoptions'
    set sessionoptions+=blank,buffers,curdir,folds,help,tabpages,winsize
    set smarttab                " https://neovim.io/doc/user/options.html#'smarttab'
    " 50 vs 10 for https://neovim.io/doc/user/options.html#'tabpagemax'
    set tags+=./tags;,tags      " https://neovim.io/doc/user/options.html#'tags'
  else
    echom "Not running with Neovim compatibility settings"
  endif
endif

colorscheme solarized
" END Customization }}}
